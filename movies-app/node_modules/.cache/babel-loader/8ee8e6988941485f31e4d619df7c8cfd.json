{"ast":null,"code":"var _jsxFileName = \"E:\\\\GitHub\\\\moviesAPIAssignment2WAD2\\\\moviesAPIAssignment2WAD2\\\\movies-app\\\\src\\\\pages\\\\favouriteActorPage.js\",\n    _this = this;\n\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"../components/actorComponents/templateActorListPage\";\nimport { ActorsContext } from \"../contexts/actorContext\";\nimport { useQueries } from \"react-query\";\nimport { getActor } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport RemoveFromFavourites from \"../components/cardIcons/removeFromFavourites\";\nimport WriteReview from \"../components/cardIcons/writeReview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar FavouriteActorPage = function FavouriteActorPage() {\n  var _useContext = useContext(ActorsContext),\n      actorIds = _useContext.favourites; // Create an array of queries and run in parallel.\n\n\n  var favouriteActorQueries = useQueries(actorIds.map(function (actorId) {\n    return {\n      queryKey: [\"actor\", {\n        id: actorId\n      }],\n      queryFn: getActor\n    };\n  })); // Check if any of the parallel queries is still loading.\n\n  var isLoading = favouriteActorQueries.find(function (m) {\n    return m.isLoading === true;\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, _this);\n  }\n\n  var actors = favouriteActorQueries.map(function (q) {\n    q.data.genre_ids = q.data.genres.map(function (g) {\n      return g.id;\n    });\n    return q.data;\n  });\n\n  var toDo = function toDo() {\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    name: \"Favourite actors\",\n    actors: actors,\n    action: function action(actor) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(RemoveFromFavourites, {\n          actor: actor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(WriteReview, {\n          actor: actor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, _this);\n};\n\nexport default FavouriteActorPage;","map":{"version":3,"names":["React","useContext","PageTemplate","ActorsContext","useQueries","getActor","Spinner","RemoveFromFavourites","WriteReview","FavouriteActorPage","actorIds","favourites","favouriteActorQueries","map","actorId","queryKey","id","queryFn","isLoading","find","m","actors","q","data","genre_ids","genres","g","toDo","actor"],"sources":["E:/GitHub/moviesAPIAssignment2WAD2/moviesAPIAssignment2WAD2/movies-app/src/pages/favouriteActorPage.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport PageTemplate from \"../components/actorComponents/templateActorListPage\";\r\nimport { ActorsContext } from \"../contexts/actorContext\";\r\nimport { useQueries } from \"react-query\";\r\nimport { getActor } from \"../api/tmdb-api\";\r\nimport Spinner from '../components/spinner'\r\nimport RemoveFromFavourites from \"../components/cardIcons/removeFromFavourites\";\r\nimport WriteReview from \"../components/cardIcons/writeReview\";\r\n\r\nconst FavouriteActorPage = () => {\r\n  const {favourites: actorIds } = useContext(ActorsContext);\r\n\r\n\r\n  // Create an array of queries and run in parallel.\r\n  const favouriteActorQueries = useQueries(\r\n    actorIds.map((actorId) => {\r\n      return {\r\n        queryKey: [\"actor\", { id: actorId }],\r\n        queryFn: getActor,\r\n      };\r\n    })\r\n  );\r\n  // Check if any of the parallel queries is still loading.\r\n  const isLoading = favouriteActorQueries.find((m) => m.isLoading === true);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  const actors = favouriteActorQueries.map((q) => {\r\n    q.data.genre_ids = q.data.genres.map(g => g.id)\r\n    return q.data\r\n  });\r\n\r\n  const toDo = () => true;\r\n\r\n  return (\r\n    <PageTemplate\r\n      name=\"Favourite actors\"\r\n      actors={actors}\r\n      action={(actor) => {\r\n        return (\r\n          <>\r\n            <RemoveFromFavourites actor={actor} />\r\n            <WriteReview actor={actor} />\r\n          </>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FavouriteActorPage;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,qDAAzB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,oBAAP,MAAiC,8CAAjC;AACA,OAAOC,WAAP,MAAwB,qCAAxB;;;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;EAC/B,kBAAgCR,UAAU,CAACE,aAAD,CAA1C;EAAA,IAAmBO,QAAnB,eAAOC,UAAP,CAD+B,CAI/B;;;EACA,IAAMC,qBAAqB,GAAGR,UAAU,CACtCM,QAAQ,CAACG,GAAT,CAAa,UAACC,OAAD,EAAa;IACxB,OAAO;MACLC,QAAQ,EAAE,CAAC,OAAD,EAAU;QAAEC,EAAE,EAAEF;MAAN,CAAV,CADL;MAELG,OAAO,EAAEZ;IAFJ,CAAP;EAID,CALD,CADsC,CAAxC,CAL+B,CAa/B;;EACA,IAAMa,SAAS,GAAGN,qBAAqB,CAACO,IAAtB,CAA2B,UAACC,CAAD;IAAA,OAAOA,CAAC,CAACF,SAAF,KAAgB,IAAvB;EAAA,CAA3B,CAAlB;;EAEA,IAAIA,SAAJ,EAAe;IACb,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,SAAP;EACD;;EAED,IAAMG,MAAM,GAAGT,qBAAqB,CAACC,GAAtB,CAA0B,UAACS,CAAD,EAAO;IAC9CA,CAAC,CAACC,IAAF,CAAOC,SAAP,GAAmBF,CAAC,CAACC,IAAF,CAAOE,MAAP,CAAcZ,GAAd,CAAkB,UAAAa,CAAC;MAAA,OAAIA,CAAC,CAACV,EAAN;IAAA,CAAnB,CAAnB;IACA,OAAOM,CAAC,CAACC,IAAT;EACD,CAHc,CAAf;;EAKA,IAAMI,IAAI,GAAG,SAAPA,IAAO;IAAA,OAAM,IAAN;EAAA,CAAb;;EAEA,oBACE,QAAC,YAAD;IACE,IAAI,EAAC,kBADP;IAEE,MAAM,EAAEN,MAFV;IAGE,MAAM,EAAE,gBAACO,KAAD,EAAW;MACjB,oBACE;QAAA,wBACE,QAAC,oBAAD;UAAsB,KAAK,EAAEA;QAA7B;UAAA;UAAA;UAAA;QAAA,SADF,eAEE,QAAC,WAAD;UAAa,KAAK,EAAEA;QAApB;UAAA;UAAA;UAAA;QAAA,SAFF;MAAA,gBADF;IAMD;EAVH;IAAA;IAAA;IAAA;EAAA,SADF;AAcD,CAzCD;;AA2CA,eAAenB,kBAAf"},"metadata":{},"sourceType":"module"}